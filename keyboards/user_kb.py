from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.utils.formatting import Text

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä

from config import ADMIN_IDS

from keyboards.admin_kb import admin_main_kb  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
from utils.set_settings import get_setting

router = Router()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞

def main_menu_kb(user_id: int):
    print(f"[DEBUG] user_id={user_id}, ADMIN_IDS={ADMIN_IDS}, is_admin={user_id in ADMIN_IDS}")
    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é


    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÑ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")],
            [KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å"), KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
            [KeyboardButton(text="üì¶ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞"), KeyboardButton(text="üìã –†–∞–±–æ—Ç–∞")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in ADMIN_IDS:
        admin_button = KeyboardButton(text="üëë –ê–¥–º–∏–Ω")
        keyboard.keyboard.append([admin_button])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω" –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    return keyboard


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üëë –ê–¥–º–∏–Ω"
@router.message(lambda message: message.text.startswith("üëë –ê–¥–º–∏–Ω"))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Text(contains) –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
async def admin_menu(message: Message):
    user_id = message.from_user.id
    if user_id in ADMIN_IDS:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = admin_main_kb()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
@router.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_main_menu(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    keyboard = main_menu_kb(user_id=message.from_user.id)
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
@router.message(F.text == "üìã –†–∞–±–æ—Ç–∞")
async def send_work_text(message: Message):
    text = await get_setting("work_text")
    if text:
        await message.answer(text)
    else:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Ä–∞–±–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.")

@router.message(F.text == "üì¶ –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞")
async def send_stock_text(message: Message):
    text = await get_setting("stock_text")
    if text:
        await message.answer(text)
    else:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω.")

# –í —Å–∞–º–æ–º –Ω–∏–∑—É —Ñ–∞–π–ª–∞
__all__ = ["main_menu_kb", "router"]
