from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from models.models import SupportMessage
from database import async_session

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
class SupportAnswer(StatesGroup):
    waiting_for_answer = State()

# –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∑–∞—è–≤–∫—É
admin_message_state = {}

@router.message(F.text == "/support")
async def show_support_messages(message: Message):
    async with async_session() as session:
        result = await session.execute(select(SupportMessage).where(SupportMessage.is_resolved == False))
        unresolved_messages = result.scalars().all()

    if not unresolved_messages:
        await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return

    for msg in unresolved_messages:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{msg.id}")],
            [InlineKeyboardButton(text="‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–æ–µ", callback_data=f"resolve_{msg.id}")]
        ])
        await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.user_id}:\n{msg.message}", reply_markup=kb)

@router.callback_query(F.data.startswith("reply_"))
async def prompt_admin_for_reply(callback: CallbackQuery, state: FSMContext):
    message_id = int(callback.data.split("_")[1])
    admin_message_state[callback.from_user.id] = message_id

    await state.set_state(SupportAnswer.waiting_for_answer)
    await callback.message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    await callback.answer()

@router.message(SupportAnswer.waiting_for_answer)
async def handle_admin_reply(message: Message, state: FSMContext, bot):
    admin_id = message.from_user.id
    message_id = admin_message_state.get(admin_id)

    if not message_id:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫ –∫–∞–∫–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –æ—Ç–≤–µ—Ç.")
        return

    async with async_session() as session:
        result = await session.execute(
            select(SupportMessage).where(SupportMessage.id == message_id)
        )
        msg = result.scalar_one_or_none()

        if not msg:
            await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    msg.user_id,
                    f"üì® –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{message.text}"
                )
                msg.is_resolved = True
                await session.commit()
                await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–æ–µ.")
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    await state.clear()
    admin_message_state.pop(admin_id, None)

@router.callback_query(F.data.startswith("resolve_"))
async def resolve_support_message(callback: CallbackQuery, bot):
    message_id = int(callback.data.split("_")[1])

    async with async_session() as session:
        result = await session.execute(
            select(SupportMessage).where(SupportMessage.id == message_id)
        )
        msg = result.scalar_one_or_none()

        if msg:
            msg.is_resolved = True
            await session.commit()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(
                    msg.user_id,
                    "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—ã–ª–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∏ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–æ–µ.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
                )
            except Exception as e:
                await callback.message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

            await callback.message.edit_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω–æ–µ.")
        else:
            await callback.message.edit_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —Ä–µ—à–µ–Ω–æ.")

    await callback.answer()
