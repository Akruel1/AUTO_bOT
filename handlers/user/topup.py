from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
import aiohttp
from keyboards.user_kb import main_menu_kb
from config import LTC_API_URL, LTC_WALLET, ADMIN_IDS
from database import async_session
from models.models import TopUpRequest, User

router = Router()

# FSM –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
class TopUpFSM(StatesGroup):
    waiting_for_amount = State()


def cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]],
        resize_keyboard=True
    )

@router.message(F.text == "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å")
async def topup_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ <b>USD</b>:", 
        reply_markup=cancel_kb()
    )
    await state.set_state(TopUpFSM.waiting_for_amount)

@router.message(TopUpFSM.waiting_for_amount, F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_topup(message: Message, state: FSMContext):
    await state.clear()
    tg_id = message.from_user.id
    await message.answer("‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb(tg_id))

@router.message(TopUpFSM.waiting_for_amount)
async def topup_amount_entered(message: Message, state: FSMContext):
    try:
        amount_usd = float(message.text)
        if amount_usd < 1:
            raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–º–∏–Ω–∏–º—É–º 1 USD). –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å LTC/USD —Å CoinGecko
    async with aiohttp.ClientSession() as session:
        async with session.get("https://api.coingecko.com/api/v3/simple/price?ids=litecoin&vs_currencies=usd") as resp:
            if resp.status != 200:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å LTC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            data = await resp.json()
            ltc_usd = data.get("litecoin", {}).get("usd")
            if ltc_usd is None:
                await message.answer("‚ö†Ô∏è –ö—É—Ä—Å LTC –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return

    amount_ltc = round(amount_usd / ltc_usd, 8)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∫–æ—à–µ–ª–µ–∫ —Ö—Ä–∞–Ω–∏—Ç—Å—è —É –∞–¥–º–∏–Ω–∞ —Å id = ADMIN_IDS[0])
    async with async_session() as session:
        admin_tg_id = ADMIN_IDS[0]
        result = await session.execute(select(User).where(User.tg_id == admin_tg_id))
        admin_user = result.scalar_one_or_none()
        if not admin_user or not admin_user.wallet_address:
            await message.answer("‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
        result = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = result.scalar_one_or_none()

        request = TopUpRequest(
            user_id=user.id,
            amount_usd=amount_usd,
            expected_ltc=amount_ltc
        )
        session.add(request)
        await session.commit()

    tg_id = message.from_user.id
    await message.answer(
        f"‚úÖ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ <b>${amount_usd:.2f}</b>\n"
        f"–≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <b>{amount_ltc:.8f} LTC</b>\n\n"
        f"ü™ô –ù–∞ –∞–¥—Ä–µ—Å:\n<code>{admin_user.wallet_address}</code>\n\n"
         f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞. "
        f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=main_menu_kb(tg_id)
    )

    await state.clear()
