from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from sqlalchemy import select

from database import async_session
from models.models import Product, ProductPhoto, User
from keyboards.inline import city_kb, category_kb, product_kb, confirm_purchase_kb

router = Router()

@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å")
async def buy_entry(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
    async with async_session() as session:
        result = await session.execute(select(Product.city).distinct())
        cities = result.scalars().all()

    if not cities:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_kb(cities))


@router.callback_query(F.data.startswith("city_"))
async def select_city(callback: CallbackQuery):
    city = callback.data.split("_")[1]

    async with async_session() as session:
        result = await session.execute(
            select(Product.category).where(Product.city == city).distinct()
        )
        categories = result.scalars().all()

    if not categories:
        await callback.message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
        return

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb(categories, city))



@router.callback_query(F.data.startswith("cat_"))
async def select_category(callback: CallbackQuery):
    _, city, category = callback.data.split("_")

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        result = await session.execute(
            select(Product).where(Product.city == city, Product.category == category)
        )
        products = result.scalars().all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        products_with_photos = []
        for product in products:
            res = await session.execute(
                select(ProductPhoto).where(ProductPhoto.product_id == product.id)
            )
            photos = res.scalars().all()
            if photos:
                products_with_photos.append(product)

    if not products_with_photos:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=product_kb(products_with_photos))



@router.callback_query(F.data.startswith("product_"))
async def confirm_purchase(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])

    async with async_session() as session:
        product = await session.get(Product, product_id)
        if not product:
            await callback.message.edit_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        text = (
            f"<b>{product.name}</b>\n"
            f"{product.description}\n\n"
            f"üíµ –¶–µ–Ω–∞: <b>${product.price_usd:.2f}</b>"
        )
        await callback.message.edit_text(
            text,
            reply_markup=confirm_purchase_kb(product_id)
        )


@router.callback_query(F.data.startswith("buy_"))
async def make_purchase(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä
        product = await session.get(Product, product_id)
        if not user or not product:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.balance_usd < float(product.price_usd):
            await callback.message.edit_text("‚ùó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–æ–≤–∞—Ä–∞
        result = await session.execute(
            select(ProductPhoto).where(ProductPhoto.product_id == product_id)
        )
        files = result.scalars().all()

        if not files:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞.")
            return

        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        file_to_send = files[0]

        # –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        user.balance_usd -= float(product.price_usd)
        await session.delete(file_to_send)
        await session.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤–Ω–µ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–∂–∞—Ç—å —Å–µ—Å—Å–∏—é –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
    await callback.message.answer_photo(
        photo=file_to_send.file_id,
        caption=f"<b>{product.name}</b>\n\n{product.description}\n\n‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    )

    # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ
    async with async_session() as session:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ —Ñ–æ—Ç–æ —É —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        result = await session.execute(
            select(ProductPhoto).where(ProductPhoto.product_id == product_id)
        )
        remaining_files = result.scalars().all()

        city = product.city
        category = product.category

        if not remaining_files:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            result = await session.execute(
                select(Product).where(Product.city == city, Product.category == category)
            )
            products = result.scalars().all()

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ
            products_with_photos = []
            for p in products:
                res = await session.execute(select(ProductPhoto).where(ProductPhoto.product_id == p.id))
                photos = res.scalars().all()
                if photos:
                    products_with_photos.append(p)

            if products_with_photos:
                if callback.message.reply_to_message:
                    await callback.message.reply_to_message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                        reply_markup=product_kb(products_with_photos)
                    )
                else:
                    await callback.message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
                        reply_markup=product_kb(products_with_photos)
                    )
            else:
                await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏, –æ–Ω–æ —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ
        await callback.message.delete()



