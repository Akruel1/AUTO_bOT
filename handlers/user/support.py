from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from sqlalchemy import insert
from models.models import SupportMessage
from database import async_session
from config import ADMIN_IDS

router = Router()


class SupportFSM(StatesGroup):
    waiting_for_message = State()


@router.message(F.text.startswith("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞") | F.text.startswith("üîß"))
async def ask_support_message(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(SupportFSM.waiting_for_message)


@router.message(SupportFSM.waiting_for_message)
async def handle_support_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    support_message = message.text

    async with async_session() as session:
        new_message = SupportMessage(user_id=user_id, message=support_message)
        session.add(new_message)
        await session.commit()

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMIN_IDS:
        await message.bot.send_message(
            admin_id,
          f"üÜò –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç <code>{user_id}</code> (@{username if username else '–Ω–µ—Ç username'}):\n\n"
          f"<i>{support_message}</i>\n\n"
          f"–í–≤–µ–¥–∏—Ç–µ <b>/support</b> —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è."

        )
